
template <typename T> class bit;

namespace std
{
    template<class T>
    void swap(bit<T>&& lhs, bit<T>&& rhs) 
    {
      bool tmp = rhs;
      rhs = (bool)lhs;
      lhs = tmp;
    }
}

#include <cassert>
#include <cstdint>
#include <exception>
#include <stdexcept>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>

class bit_sequence;

template <typename T> class bit
{
public:
  bit(int bit_n, T &parent_bitset)
      : m_bit_num(bit_n), m_parent_bitset(&parent_bitset)
  {
  }
  bit(const bit&) = default;
  bit(bit&) = default;
  bit& operator=(const bit&) = default;
  bit& operator=(bit&&) = default;
  ~bit() = default;

  bit &operator=(bool rhs)
  {
    const auto bit_mask = ~(((T)1) << m_bit_num);
    *m_parent_bitset &= bit_mask;
    *m_parent_bitset |= (T)rhs << m_bit_num;
    assert((bool)(*this) == rhs);
    return *this;
  }

  operator bool() const
  {
    const auto bit_mask = (((T)1) << m_bit_num);
    return (bit_mask & (*m_parent_bitset)) != 0;
  }

private:
  int m_bit_num;
  T* m_parent_bitset;
};

struct bit_iterator
    : public std::iterator<std::random_access_iterator_tag, bit<uint64_t>>
{
  constexpr bit_iterator(const bit_iterator&) = default;
  bit_iterator(bit_iterator&) = default;
  bit_iterator& operator=(const bit_iterator&) = default;
  bit_iterator& operator=(bit_iterator&&) = default;

  bit_iterator(int n, bit_sequence &bits) : m_bit_num(n), m_bits(&bits) {}
  bit_iterator operator--()
  {
    m_bit_num--;
    return *this;
  }
  bit_iterator operator++()
  {
    m_bit_num++;
    return *this;
  }
  bit_iterator operator++(int)
  {
    auto tmp = *this;
    m_bit_num++;
    return tmp;
  }
  friend bool operator<(const bit_iterator &lhs, const bit_iterator &rhs)
  {
    return lhs.m_bit_num < rhs.m_bit_num;
  }
  friend bool operator==(const bit_iterator &lhs, const bit_iterator &rhs)
  {
    return lhs.m_bit_num == rhs.m_bit_num;
  }
  friend bool operator!=(const bit_iterator &lhs, const bit_iterator &rhs)
  {
    return !(lhs == rhs);
  }
  friend bit_iterator operator+(const bit_iterator &lhs, uint64_t n)
  {
    return bit_iterator(lhs.m_bit_num + n, *lhs.m_bits);
  }
  friend bit_iterator operator-(const bit_iterator &lhs, uint64_t n)
  {
    return bit_iterator(lhs.m_bit_num - n, *lhs.m_bits);
  }

  bit<uint64_t> operator*();

  uint64_t m_bit_num;
  bit_sequence *m_bits;
};

class bit_sequence
{
public:
  bit_sequence(int size) : m_size(size), m_bits(size / 64 + 1, false) {}
  bit_sequence(int size, const std::string &start_value) : bit_sequence(size)
  {
    int pos = 0;
    for (auto itr = start_value.crbegin(); itr != start_value.crend(); itr++)
    {
      if (*itr == '0' || *itr == '1')
      {
        (*this)[pos] = (*itr == '1');
        assert(((bool)(*this)[pos] == (*itr == '1')));
        pos++;
      }
      else
      {
        throw std::invalid_argument("Bit can only be '0' or '1'!");
      }
    }
  }

  void print()
  {
    for(bool b : (*this))
    {
      std::cout << b;
    }
    std::cout << std::endl;
  }

  int n_bits() const { return m_size; }

  friend bit_sequence operator+(const bit_sequence &lhs,
                                const bit_sequence &rhs);

  bit<uint64_t> operator[](size_t i)
  {
    if (i >= m_size)
    {
      throw std::out_of_range(std::to_string(i));
    }
    return bit<uint64_t>(i % 64, m_bits[i / 64]);
  }

  bit_iterator begin() { return bit_iterator(0, *this); }
  bit_iterator end() { return bit_iterator(m_size, *this); }

private:
  uint64_t m_size;
  std::vector<uint64_t> m_bits;
};

bit_sequence operator+(const bit_sequence &lhs, const bit_sequence &rhs)
{
  bit_sequence res(lhs.n_bits() + 64);
  bool carry = false;
  size_t i = 0;
  const auto size = lhs.m_bits.size();
  for (; i < size; i++)
  {
    unsigned long long sum;
    auto new_carry =
        __builtin_uaddll_overflow(lhs.m_bits[i], rhs.m_bits[i], &sum);
    new_carry |= __builtin_uaddll_overflow(sum, carry, &sum);

    res.m_bits[i] = sum;
    carry = new_carry;
  }
  res.m_bits[i] = (int)carry;
  return res;
}

bit<uint64_t> bit_iterator::operator*() { return (*m_bits)[m_bit_num]; }

int main()
{
  bit_sequence bit_field(3, "010");
  bit_field.print();
  std::swap(bit_field[0], bit_field[1]);
  bit_field.print();
  std::reverse(bit_field.begin(), bit_field.end());
  bit_field.print();
  return 0;
}
